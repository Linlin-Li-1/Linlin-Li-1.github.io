<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PyTorch Implementation on Linlin Li&#39;s Data Science Project Portfolio</title>
    <link>https://linlin-li-1.github.io/tags/pytorch-implementation/</link>
    <description>Recent content in PyTorch Implementation on Linlin Li&#39;s Data Science Project Portfolio</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 04 Nov 2020 23:30:38 -0500</lastBuildDate>
    
	<atom:link href="https://linlin-li-1.github.io/tags/pytorch-implementation/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Implementation of First-order Optimization Methods (PyTorch)</title>
      <link>https://linlin-li-1.github.io/2020/11/implementation-of-first-order-optimization-methods-pytorch/</link>
      <pubDate>Wed, 04 Nov 2020 23:30:38 -0500</pubDate>
      
      <guid>https://linlin-li-1.github.io/2020/11/implementation-of-first-order-optimization-methods-pytorch/</guid>
      <description>In this post, I would like to share my implementation of several famous first-order optimization methods. I know that these methods have been implemented very well in many packages, but I hope my implementation can help you understand the ideas behind it.
Suppose we have \(N\) data examples and the parameters \(\mathbf{w} \in \mathcal{R}^D\).
For convenience, I first write a class named optimizer.
class optimizer: def __init__(self): pass def set_param(self, parameters): self.</description>
    </item>
    
  </channel>
</rss>